{
    // Place your backend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Basic Structure": {
        "prefix": "gohorse",
        "body": [
            "using System;",
            "using System.Collections.Generic;",
            "using System.Text;",
            "using System.Threading;",
            "using System.Threading.Tasks;",
            "",
            "namespace ${1:namespace}",
            "{",
            "    public class ${2:className}",
            "    {",
            "",
            "    }",
            "}",
            ""
        ],
        "description": "Basic Structure"
    },
    "Query Handler": {
        "prefix": "qhandler",
        "body": [
            "public class Query : IRequest<${1:returnObject}> { }",
            "",
            "public class Handler : IRequestHandler<Query, ${1:returnObject}>",
            "{",
            "    private readonly DataContext context;",
            "",
            "    public Handler(DataContext context)",
            "    {",
            "        this.context = context;",
            "    }",
            "",
            "    public async Task<${1:returnObject}> Handle(Query request, CancellationToken cancellationToken)",
            "    {",
            "        // handler logic goes here",
            "    }",
            "}"
        ],
        "description": "Query Handler"
    },
    "Command Handler": {
        "prefix": "chandler",
        "body": [
            "public class Command : IRequest",
            "{",
            "",
            "}",
            "",
            "public class Handler : IRequestHandler<Command>",
            "{",
            "    private readonly DataContext context;",
            "",
            "    public Handler(DataContext context)",
            "    {",
            "        this.context = context;",
            "    }",
            "",
            "    public async Task<Unit> Handle(Command request, CancellationToken cancellationToken)",
            "    {",
            "        // logic goes here",
            "        var success = await context.SaveChangesAsync() > 0;",
            "",
            "        if (success) return Unit.Value;",
            "        throw new Exception(\"Fail to save changes\");",
            "    }",
            "}"
        ],
        "description": "Command Handler"
    }
}